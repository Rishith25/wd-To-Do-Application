name: Auto test todo-app solution
on: push

env:
  PG_DATABASE: wd-todo-test
  PG_USER: ${{ secrets.PG_USER }}
  PG_PASSWORD: ${{secrets.PG_PASSWORD}}
  SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}

jobs:
  # Label of the container job
  run-tests:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:11.7
        # Provide the password for postgres using Github Actions Secret Keys
        env:
          POSTGRES_USER: ${{ secrets.PG_USER }}
          POSTGRES_PASSWORD: ${{secrets.PG_PASSWORD}}
          POSTGRES_DB: wd-todo-test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v3

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install dependencies
        run: cd todo-app && npm ci

      # Tests
      - name: Run unit tests
        run: cd todo-app && npm test

      # - name: Run integration tests
      #   run: |
      #     cd todo
      #     npm install cypress cypress-json-results
      #     npx cypress run --env STUDENT_SUBMISSION_URL="http://localhost:3000/"

      - name: Slack Notify
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status}}
          steps: ${{toJson(steps)}}
          channel: "#web-development"
        if: always()

      - name: Success Notify
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"✨Commit has been successful✅"}' ${{secrets.SLACK_WEBHOOK_URL}}

      - name: Faliure Notify
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"⚠️Error: The pipeline has failed❗"}' ${{secrets.SLACK_WEBHOOK_URL}}

      - name: Run the app
        id: run-app
        run: |
          cd todo-app
          npm install
          npx sequelize-cli db:drop
          npx sequelize-cli db:create
          npx sequelize-cli db:migrate
          PORT=3000 npm start &
          sleep 5

    # Deployment steps in CI-CD Pipeline
  deploy:
    name: Deploy-to-production
    needs: run-tests
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/wd-to-do-application

      - name: Docker Push
        run: docker push ${{ secrets.DOCKER_USERNAME }}/wd-to-do-application
